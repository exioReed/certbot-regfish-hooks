name: "Integration test"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # see https://devguide.python.org/versions/ for supported Python versions
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Setup Python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v5"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Upgrade build dependencies"
        run: "pip install -U pip build setuptools_scm>=8"

      - name: "Setup env for current ${{ github.job }} job"
        run: |
          echo "CFG_PREFIX=py$(echo "${{ matrix.python-version }}" | sed 's/\.//g')" >> "$GITHUB_ENV"
          echo "CFG_PKG_VERSION=$(python -m setuptools_scm)" >> "$GITHUB_ENV"

      - name: "Build package ${{ github.repository }} version ${{ env.CFG_PKG_VERSION }}"
        run: "python -m build ."

      - name: "Upload artifact"
        id: "upload-dist"
        uses: "actions/upload-artifact@v4"
        with:
          name: "${{ env.CFG_PREFIX }}"
          path: "dist/"
          retention-days: 1

      - name: "Generate output"
        id: "gen-output"
        run: |
          echo "${CFG_PREFIX}-build-version=${CFG_PKG_VERSION}" >> "$GITHUB_OUTPUT"
          echo "${CFG_PREFIX}-upload-dist-status=${{ steps.upload-dist.outputs.status }}" >> "$GITHUB_OUTPUT"
          echo "${CFG_PREFIX}-artifact-id=${{ steps.upload-dist.outputs.artifact-id }}" >> "$GITHUB_OUTPUT"
    outputs:
      jobs: "${{ toJSON(steps.gen-output.outputs) }}"

  csr-integration-test:
    runs-on: ubuntu-latest
    needs: ["build"]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: "Setup env for current ${{ github.job }} job"
        env:
          BUILD_JOBS_OUTPUT_JSON: "${{ needs.build.outputs.jobs }}"
          CFG_PYTHON_VERSION: "${{ matrix.python-version }}"
        run: |
          CFG_PREFIX="py$(echo "${CFG_PYTHON_VERSION}" | sed 's/\.//g')"
          CFG_PKG_VERSION="$(jq -r ".[\"$CFG_PREFIX-build-version\"]" <<<"${BUILD_JOBS_OUTPUT_JSON}")"
          CFG_DOMAIN_NAME="cbrghks-$CFG_PREFIX-v$(echo "$CFG_PKG_VERSION" | sed 's/[^a-zA-Z0-9]/-/g')-$GITHUB_RUN_ID"
          echo "CFG_PREFIX=$CFG_PREFIX" >>"$GITHUB_ENV"
          echo "CFG_PKG_VERSION=$CFG_PKG_VERSION" >>"$GITHUB_ENV"
          echo "CFG_DOMAIN_NAME=$CFG_DOMAIN_NAME" >>"$GITHUB_ENV"

      - name: "Fetch distributables for Python ${{ matrix.python-version }}"
        uses: "actions/download-artifact@v4"
        with:
          name: "${{ env.CFG_PREFIX }}"
          path: "dist/"

      - name: "Setup Python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v5"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install certbot"
        run: "pip install certbot"

      - name: "Install regfish hooks"
        run: "pip install dist/*.whl"

      - name: "Prepare certbot environment"
        env:
          CERTBOT_TEST_ACCOUNT: "${{ secrets.CERTBOT_TEST_ACCOUNT }}"
          REGFISH_API_KEY: "${{ secrets.REGFISH_API_KEY }}"
        run: |
          CERTBOT_BASE_DIR="$RUNNER_TEMP/integration-test"
          echo "CERTBOT_BASE_DIR=$CERTBOT_BASE_DIR" >> "$GITHUB_ENV"

          CERTBOT_CONFIG_DIR="$CERTBOT_BASE_DIR/config"
          echo "CERTBOT_CONFIG_DIR=$CERTBOT_CONFIG_DIR" >> "$GITHUB_ENV"
          mkdir -p "$CERTBOT_CONFIG_DIR"
          tar -C "$CERTBOT_CONFIG_DIR" -xzf <(echo "$CERTBOT_TEST_ACCOUNT" | base64 -d)

          CERTBOT_LOG_DIR="$CERTBOT_BASE_DIR/log"
          echo "CERTBOT_LOG_DIR=$CERTBOT_LOG_DIR" >> "$GITHUB_ENV"
          mkdir -p "$CERTBOT_LOG_DIR"

          REGFISH_API_KEY_FILE="$CERTBOT_BASE_DIR/regfish-api-key"
          echo "REGFISH_API_KEY_FILE=$REGFISH_API_KEY_FILE" >> "$GITHUB_ENV"
          cat <(echo "$REGFISH_API_KEY") > "$REGFISH_API_KEY_FILE"

      - name: "Request certificate"
        env:
          INTEGRATION_TEST_FULL_DOMAIN: "${{ env.CFG_DOMAIN_NAME }}.${{ vars.TEST_BASE_DOMAIN}}"
        run: |
          certbot \
            certonly \
            --manual \
            --test-cert \
            --manual-auth-hook 'certbot-regfish-auth-hook --regfish-api-key-file '"$REGFISH_API_KEY_FILE" \
            --manual-cleanup-hook 'certbot-regfish-cleanup-hook --regfish-api-key-file '"$REGFISH_API_KEY_FILE" \
            --preferred-challenges dns-01 \
            --key-type ecdsa \
            --elliptic-curve secp384r1 \
            --domain "$INTEGRATION_TEST_FULL_DOMAIN" \
            --config-dir "$CERTBOT_CONFIG_DIR" \
            --work-dir "$CERTBOT_BASE_DIR" \
            --logs-dir "$CERTBOT_LOG_DIR"
